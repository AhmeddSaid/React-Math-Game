{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\ahmed\\\\Documents\\\\New folder (2)\\\\CODING\\\\Projects\\\\React Math Game\\\\src\\\\Game.js\",\n    _s = $RefreshSig$();\n\nimport { useState, useEffect } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Game = props => {\n  _s();\n\n  const [value1, setValue1] = useState(null);\n  const [value2, setValue2] = useState(null);\n  const [value3, setValue3] = useState(null);\n  const [proposedAnswer, setProposedAnswer] = useState(null); //! Calls makeNewQuestion() when the component has been mounted, then sets values\n\n  useEffect(() => {\n    let valuesArray = makeNewQuestion();\n    setValue1(valuesArray[0]);\n    setValue2(valuesArray[1]);\n    setValue3(valuesArray[2]);\n    setProposedAnswer(valuesArray[3]);\n  }, []);\n\n  const makeNewQuestion = () => {\n    const value1 = Math.floor(Math.random() * 100);\n    const value2 = Math.floor(Math.random() * 100);\n    const value3 = Math.floor(Math.random() * 100);\n    const proposedAnswer = Math.floor(Math.random() * 3) + (value1 + value2 + value3);\n    return [value1, value2, value3, proposedAnswer];\n  }; //! Make new question after submit\n\n\n  const refresh = newValuesArray => {\n    setValue1(newValuesArray[0]);\n    setValue2(newValuesArray[1]);\n    setValue3(newValuesArray[2]);\n    setProposedAnswer(newValuesArray[3]);\n  };\n\n  const handleAnswer = event => {\n    const newValuesArray = makeNewQuestion();\n    refresh(newValuesArray);\n    const answerWasCorrect = evaluateAnswer(event.target.name);\n    props.handleAnswer(answerWasCorrect);\n  };\n\n  const evaluateAnswer = givenAnswer => {\n    const corrAnswer = value1 + value2 + value3;\n    return corrAnswer === proposedAnswer && givenAnswer === \"true\" || corrAnswer !== proposedAnswer && givenAnswer === \"false\";\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"equation\",\n      children: /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"text\",\n        children: `${value1} + ${value2} + ${value3} = ${proposedAnswer}`\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 55,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      className: \"submit-btn\",\n      onClick: handleAnswer,\n      name: \"true\",\n      children: \"True\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      className: \"submit-btn\",\n      name: \"false\",\n      onClick: handleAnswer,\n      children: \"False\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 53,\n    columnNumber: 5\n  }, this);\n};\n\n_s(Game, \"6kDpDwm4mrUzB5RjAq27q7iYrRI=\");\n\n_c = Game;\nexport default Game;\n\nvar _c;\n\n$RefreshReg$(_c, \"Game\");","map":{"version":3,"names":["useState","useEffect","Game","props","value1","setValue1","value2","setValue2","value3","setValue3","proposedAnswer","setProposedAnswer","valuesArray","makeNewQuestion","Math","floor","random","refresh","newValuesArray","handleAnswer","event","answerWasCorrect","evaluateAnswer","target","name","givenAnswer","corrAnswer"],"sources":["C:/Users/ahmed/Documents/New folder (2)/CODING/Projects/React Math Game/src/Game.js"],"sourcesContent":["import { useState, useEffect } from \"react\";\r\n\r\nconst Game = (props) => {\r\n  const [value1, setValue1] = useState(null);\r\n  const [value2, setValue2] = useState(null);\r\n  const [value3, setValue3] = useState(null);\r\n  const [proposedAnswer, setProposedAnswer] = useState(null);\r\n\r\n  //! Calls makeNewQuestion() when the component has been mounted, then sets values\r\n  useEffect(() => {\r\n    let valuesArray = makeNewQuestion();\r\n    setValue1(valuesArray[0]);\r\n    setValue2(valuesArray[1]);\r\n    setValue3(valuesArray[2]);\r\n    setProposedAnswer(valuesArray[3]);\r\n  }, []);\r\n\r\n  const makeNewQuestion = () => {\r\n    const value1 = Math.floor(Math.random() * 100);\r\n    const value2 = Math.floor(Math.random() * 100);\r\n    const value3 = Math.floor(Math.random() * 100);\r\n\r\n    const proposedAnswer = Math.floor(Math.random() * 3) + (value1 + value2 + value3);\r\n\r\n    return [value1, value2, value3, proposedAnswer];\r\n  };\r\n\r\n  //! Make new question after submit\r\n  const refresh = (newValuesArray) => {\r\n    setValue1(newValuesArray[0]);\r\n    setValue2(newValuesArray[1]);\r\n    setValue3(newValuesArray[2]);\r\n    setProposedAnswer(newValuesArray[3]);\r\n  };\r\n\r\n  const handleAnswer = (event) => {\r\n    const newValuesArray = makeNewQuestion();\r\n    refresh(newValuesArray);\r\n    const answerWasCorrect = evaluateAnswer(event.target.name);\r\n    props.handleAnswer(answerWasCorrect);\r\n  };\r\n\r\n  const evaluateAnswer = (givenAnswer) => {\r\n    const corrAnswer = value1 + value2 + value3;\r\n\r\n    return (\r\n      (corrAnswer === proposedAnswer && givenAnswer === \"true\") ||\r\n      (corrAnswer !== proposedAnswer && givenAnswer === \"false\")\r\n    );\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <div className=\"equation\">\r\n        <p className=\"text\">{`${value1} + ${value2} + ${value3} = ${proposedAnswer}`}</p>\r\n      </div>\r\n      <button className=\"submit-btn\" onClick={handleAnswer} name=\"true\">\r\n        True\r\n      </button>\r\n      <button className=\"submit-btn\" name=\"false\" onClick={handleAnswer}>\r\n        False\r\n      </button>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Game;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}